package main

import (
	"log"
	"net/http"
	"os"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

const (
	// Button options
	sewageButton   = "–•–æ—á—É –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É —â–æ–¥–æ –ø—Ä–æ–±–∏—Ç—Ç—è —Å–º—ñ—Ç—Ç—î–ø—Ä–æ–≤–æ–¥—É/–Ω–µ –≤–∏–≤–µ–∑–µ–Ω–æ–≥–æ —Å–º—ñ—Ç—Ç—è."
	lightButton    = "–•–æ—á—É –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É —â–æ–¥–æ –Ω–µ—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—ñ —Å–≤—ñ—Ç–∏–ª—å–Ω–∏–∫–∞ –≤ –º—ñ—Å—Ü—è—Ö –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è."
	plumbingButton = "–•–æ—á—É –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É —â–æ–¥–æ –ø—Ä–æ–±–ª–µ–º —ñ–∑ –∫–∞–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é, –æ–ø–∞–ª–µ–Ω–Ω—è–º —á–∏ –≤–æ–¥–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è–º."
	roofButton     = "–•–æ—á—É –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É —â–æ–¥–æ –ø—Ä–æ—Ç—ñ–∫–∞–Ω–Ω—è –ø–æ–∫—Ä—ñ–≤–ª—ñ —á–∏ –≥–µ—Ä–º–µ—Ç–Ω–∏—Ö —à–≤—ñ–≤."
	otherButton    = "–Ü–Ω—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è."
	feedbackButton = "–í–∞—à—ñ –≤—ñ–¥–≥—É–∫–∏)))"

	// Main messages
	welcomeMessage = `–í—ñ—Ç–∞—é! –ù–∞ –∑–≤'—è–∑–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä –∂–∏—Ç–ª–æ–≤–∏—Ö –±—É–¥–∏–Ω–∫—ñ–≤ –ö–ü –ù–ú–† "–ñ–ö–û"üëãüèª
–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º —ñ –Ω–∞–º –ø–æ–ª—ñ–ø—à–∏—Ç–∏ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—é —â–æ–¥–æ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥ –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–≥–∞—Ç–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω–∏–º–∏ –±—É–¥–∏–Ω–∫–∞–º–∏. 

–í–ê–ñ–õ–ò–í–û‚ùóÔ∏è
–Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –∞–≤–∞—Ä—ñ–π–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è, –Ω–µ–≥–∞–π–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –∑–∞ –Ω–æ–º–µ—Ä–æ–º: 0 800 213 775      

–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é, —è–∫–∞ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—åüëá`

	requestInfoText = `–î–ª—è –æ–±—Ä–æ–±–∫–∏ –í–∞—à–æ—ó –∑–∞—è–≤–∫–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:
- –ü–Ü–ë
- –í—É–ª–∏—Ü—è
- ‚Ññ –±—É–¥–∏–Ω–∫—É
- ‚Ññ –∫–≤–∞—Ä—Ç–∏—Ä–∏
- –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
- –û–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é –¥–µ—Ç–∞–ª—å–Ω–æ

–í–≤–µ–¥—ñ—Ç—å –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.`

	feedbackInfoText = `–ó–∞–ª–∏—à—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –∑–≤ º—è–∑–∫—É —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ`

	otherInfoText = `–û–ø–∏—à—ñ—Ç—å –í–∞—à—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ç–∞ –∑–∞–ª–∏—à—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –∑–≤ º—è–∑–∫—É`

	followUpText = `–Ø–∫—â–æ –º–∞—î—Ç–µ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —á–∏ –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è —â–æ–¥–æ —è–∫–æ—Å—Ç—ñ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥, –º–æ–∂–Ω–∞ —Ç–∞–∫–æ–∂ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º 067 895 34 99, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –≤—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ç–∞ –≤—á–∞—Å–Ω–æ –∑—Ä–µ–∞–≥—É–≤–∞—Ç–∏.

–Ø–∫—â–æ —ñ –ø—ñ—Å–ª—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —É –í–∞—Å –∑–∞–ª–∏—à–∏–ª–∏—Å—å –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è —á–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞—à–æ–º—É –∫–µ—Ä—ñ–≤–Ω–∏–∫—É –∑–∞ –Ω–æ–º–µ—Ä–æ–º 098 464 68 63`
)

var groupID = int64(-1002546642948)

// var groupID = int64(-4672540477)

// User state tracking
var userStates = make(map[int64]string)

// Store information about groups the bot is in
type GroupInfo struct {
	ID       int64
	Title    string
	Username string
	Type     string
	JoinedAt time.Time
}

// Map to store groups the bot has seen
var botGroups = struct {
	sync.RWMutex
	groups map[int64]GroupInfo
}{groups: make(map[int64]GroupInfo)}

// Handles a button click by setting user state and sending appropriate info text
func handleButtonClick(bot *tgbotapi.BotAPI, userID int64, buttonText string) error {
	// Update the state with the selected button
	userStates[userID] = buttonText

	// Create message with appropriate text based on button type
	msg := tgbotapi.NewMessage(userID, "")

	// Use switch instead of if-else for better readability
	switch buttonText {
	case feedbackButton:
		msg.Text = feedbackInfoText
	case otherButton:
		msg.Text = otherInfoText
	default:
		msg.Text = requestInfoText
	}

	// Send the message
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("Error sending button response message: %v", err)
	}
	return err
}

// Add a group to the tracking list
func trackGroup(chat *tgbotapi.Chat) {
	if chat.Type == "group" || chat.Type == "supergroup" {
		botGroups.Lock()
		defer botGroups.Unlock()

		// Set the groupID to this chat's ID
		groupID = chat.ID
		log.Printf("Set groupID to: %d", groupID)

		// Only add if not already tracked
		if _, exists := botGroups.groups[chat.ID]; !exists {
			botGroups.groups[chat.ID] = GroupInfo{
				ID:       chat.ID,
				Title:    chat.Title,
				Username: chat.UserName,
				Type:     chat.Type,
				JoinedAt: time.Now(),
			}
			log.Printf("Bot added to new group: %s (ID: %d)", chat.Title, chat.ID)
		}
	}
}

func getMainKeyboard() tgbotapi.ReplyKeyboardMarkup {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(sewageButton),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(lightButton),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(plumbingButton),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(roofButton),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(otherButton),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(feedbackButton),
		),
	)
	keyboard.ResizeKeyboard = true
	return keyboard
}

func main() {
	// load env vars
	err := godotenv.Load()
	if err != nil {
		log.Printf("Warning: error opening .env file: %v", err)
		log.Println("Continuing without .env file")
	}

	bot, err := tgbotapi.NewBotAPI(os.Getenv("APPLICATIONS_FORM_BOT_TOKEN"))
	if err != nil {
		log.Panic(err)
	}

	// Delete webhook (important!)
	_, err = bot.Request(tgbotapi.DeleteWebhookConfig{
		DropPendingUpdates: true,
	})
	if err != nil {
		log.Panic(err)
	}

	log.Printf("Authorized on account %s", bot.Self.UserName)

	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60
	updateConfig.AllowedUpdates = []string{"message", "callback_query"}

	updates := bot.GetUpdatesChan(updateConfig)

	// Start HTTP server for Cloud Run
	go func() {
		port := os.Getenv("APPLICATIONS_FORM_BOT_PORT")
		if port == "" {
			port = "8080"
		}
		http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
			w.Write([]byte("Applications Form Bot is running!"))
		})
		log.Printf("Starting HTTP server on port %s", port)
		if err := http.ListenAndServe(":"+port, nil); err != nil {
			log.Printf("HTTP server error: %v", err)
		}
	}()

	for update := range updates {
		if update.Message == nil {
			continue
		}

		// Track group if message is from a group
		if update.Message.Chat.Type == "group" || update.Message.Chat.Type == "supergroup" {
			trackGroup(update.Message.Chat)
		}

		userID := update.Message.Chat.ID
		msg := tgbotapi.NewMessage(userID, "")

		// Handle commands
		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				// Clear user state when they start again
				delete(userStates, userID)

				// Different behavior for groups vs private chats
				if update.Message.Chat.Type == "group" || update.Message.Chat.Type == "supergroup" {
					// Simplified message for groups
					msg.Text = "–ë—É–¥—å –ª–∞—Å–∫–∞ –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
					if _, err := bot.Send(msg); err != nil {
						log.Printf("Error sending group welcome message: %v", err)
					}
				} else {
					// Send text message as fallback
					msg.Text = welcomeMessage
					msg.ReplyMarkup = getMainKeyboard()
					if _, err := bot.Send(msg); err != nil {
						log.Printf("Error sending fallback welcome message: %v", err)
					}
				}
			}
			continue
		}

		// Handle request types or user input based on state
		if state, exists := userStates[userID]; exists {
			// Skip processing user state if in a group chat
			if update.Message.Chat.Type == "group" || update.Message.Chat.Type == "supergroup" {
				continue
			}

			// Check if user clicked another button while having a state
			switch update.Message.Text {
			case sewageButton, lightButton, plumbingButton, roofButton, otherButton, feedbackButton:
				// Handle button click using helper method
				if err := handleButtonClick(bot, userID, update.Message.Text); err != nil {
					log.Printf("Error handling button click: %v", err)
				}
				continue
			}

			// User is submitting request details
			// Forward message to admin if username is available
			if groupID != 0 {
				// Create forward message with context
				forwardText := "–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
				forwardText += "–¢–∏–ø –∑–∞—è–≤–∫–∏: " + state + "\n\n"
				forwardText += "–î–µ—Ç–∞–ª—ñ –∑–∞—è–≤–∫–∏:\n" + update.Message.Text

				// Information about the sender
				if update.Message.From != nil {
					forwardText += "\n\n–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: "
					if update.Message.From.UserName != "" {
						forwardText += "@" + update.Message.From.UserName
						if update.Message.From.FirstName != "" {
							forwardText += ", " + update.Message.From.FirstName
						}
						if update.Message.From.LastName != "" {
							forwardText += " " + update.Message.From.LastName
						}
					}
				}

				// Try to forward to admin by username
				adminMsg := tgbotapi.NewMessage(groupID, forwardText)
				if _, err := bot.Send(adminMsg); err != nil {
					log.Printf("Error forwarding message to group: %v", err)
				}
			}

			// Reset user state and send follow-up message
			delete(userStates, userID)
			msg.Text = followUpText
			msg.ReplyMarkup = getMainKeyboard()
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Error sending follow-up message: %v", err)
			}
			continue
		}

		// Handle button clicks to set user state
		switch update.Message.Text {
		case sewageButton, lightButton, plumbingButton, roofButton, otherButton, feedbackButton:
			// Skip menu button handling and message sending in group chats
			if update.Message.Chat.Type == "group" || update.Message.Chat.Type == "supergroup" {
				log.Printf("Ignoring button click in group chat: %s", update.Message.Chat.Title)
				continue
			}

			// Skip if user already has a state (handled above)
			if _, exists := userStates[userID]; exists {
				continue
			}

			// Handle button click using helper method
			if err := handleButtonClick(bot, userID, update.Message.Text); err != nil {
				log.Printf("Error handling button click: %v", err)
			}
			continue
		default:
			// If we don't recognize the message and no state, ask to use the menu
			// Only respond with menu prompt in private chats
			if _, exists := userStates[userID]; !exists && update.Message.Chat.Type != "group" && update.Message.Chat.Type != "supergroup" {
				msg.Text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∑–∞—è–≤–∫–∏."
				msg.ReplyMarkup = getMainKeyboard()
				if _, err := bot.Send(msg); err != nil {
					log.Printf("Error sending menu prompt: %v", err)
				}
			}
		}
	}
}
